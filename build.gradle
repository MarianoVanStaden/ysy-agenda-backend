plugins {
    id 'java'
    id 'war' // Añadir el plugin para WAR
    id 'io.spring.dependency-management' version "1.0.9.RELEASE"
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'pl.allegro.tech.build.axion-release' version '1.10.1'
    id 'com.palantir.docker' version '0.25.0'
    id 'com.palantir.docker-run' version '0.25.0'
    id 'jp.classmethod.aws.cloudformation' version '0.41'
}

    version = scmVersion.version

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {

        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'mysql:mysql-connector-java:8.0.33'


        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-devtools'
        implementation group: 'com.h2database', name: 'h2', version: '1.3.148'
        implementation 'org.springframework.boot:spring-boot-starter-mail'
        implementation 'com.mailgun:mailgun-java:1.1.3'
        implementation 'com.mashape.unirest:unirest-java:1.4.9'
        // Dependencia para enviar correos con Mailgun (usando la API de Mailgun)
        implementation 'com.mashape.unirest:unirest-java:1.4.9'

        // Dependencia para Spring Boot Mail (si decides usar SMTP)
        implementation 'org.springframework.boot:spring-boot-starter-mail'

        // Dependencia para Spring Boot Web (para el controlador y servicios)
        implementation 'org.springframework.boot:spring-boot-starter-web'

        // Dependencia para Spring Boot Data JPA (si trabajas con bases de datos)
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

        // Dependencia para validación de datos
        implementation 'org.springframework.boot:spring-boot-starter-validation'

        // Otras dependencias
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.mindrot:jbcrypt:0.4'
        implementation 'org.springframework.boot:spring-boot-starter-security'



        compileOnly 'org.projectlombok:lombok:1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

// Deshabilitar la tarea bootJar para evitar conflictos
    tasks.named('bootJar') {
        enabled = false
    }

// Asegurarse de que el WAR esté habilitado
    tasks.named('war') {
        enabled = true
    }

    test {
        useJUnitPlatform()
    }

    String dockerHubUsernameProperty = findProperty('dockerHubUsername') ?: 'tkgregory'
    String imageName = "jordanthecoder/spring-boot-api-example:$version"

    docker {
        name imageName
        files "build/libs/${bootJar.archiveFileName.get()}"
        buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
    }

    dockerRun {
        name project.name
        image imageName
        ports '8080:8080'
        clean true
    }

    import com.amazonaws.services.cloudformation.model.Capability

    cloudFormation {
        stackName "$project.name-stack"
        stackParams([
                SubnetID: findProperty('subnetId') ?: '',
                ServiceName: project.name,
                ServiceVersion: project.version,
                DockerHubUsername: dockerHubUsernameProperty
        ])
        templateFile project.file("ecs.yml")
    }
